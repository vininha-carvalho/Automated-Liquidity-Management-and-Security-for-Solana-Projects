//@version=6
strategy("Channel Mean Rev V/F (MVP Integration)", overlay=true, initial_capital=10000, default_qty_type=strategy.percent_of_equity, default_qty_value=10)

// Input variables for integration with bot via webhook
buyWebhook = input("", title="Webhook для Buy (JSON code)")
exitBuyWebhook = input("", title="Webhook для Exit Buy (JSON code)")

// Strategy settings
useStocks = input.bool(false, title="Use mode Stocks (units)")
plotDynamic = input.bool(false, title="Display dynamic levels")

deviation1 = input.float(title="Deviation 1 (%)", defval=1.3, minval=0.01, step=0.1) / 100
deviation2 = input.float(title="Deviation 2 (%)", defval=7.5, minval=0.01, step=0.1) / 100
deviation3 = input.float(title="Deviation 3 (%)", defval=13.3, minval=0.01, step=0.1) / 100
deviation4 = input.float(title="Deviation 4 (%)", defval=21.1, minval=0.01, step=0.1) / 100
deviation5 = input.float(title="Deviation 5 (%)", defval=33.7, minval=0.01, step=0.1) / 100

unitsLevel1 = input.float(title="Level 1 (cash units)", defval=50)
unitsLevel2 = input.float(title="Level 2 (cash units)", defval=100)
unitsLevel3 = input.float(title="Level 3 (cash units)", defval=200)
unitsLevel4 = input.float(title="Level 4 (cash units)", defval=400)
unitsLevel5 = input.float(title="Level 5 (cash units)", defval=600)

// Moving average type and length
maType = input.string("WMA", "MA Type", options=["WMA", "SMA", "RMA", "EMA", "HMA"])
maLength = input.int(20, "MA Length", minval=2)
ma = switch maType
    "EMA" => ta.ema(close, maLength)
    "SMA" => ta.sma(close, maLength)
    "RMA" => ta.rma(close, maLength)
    "WMA" => ta.wma(close, maLength)
    "HMA" => ta.hma(close, maLength)
    => runtime.error("Incorrect type MA")

// Calculation of dynamic levels (lower channels)
L1 = ma * (1 - deviation1)
L2 = ma * (1 - deviation2)
L3 = ma * (1 - deviation3)
L4 = ma * (1 - deviation4)
L5 = ma * (1 - deviation5)

// Static levels updated at opening of trades
var float s2 = na
var float s3 = na
var float s4 = na
var float s5 = na

// Determining the target profit level
take_profit_pct = input.float(1.67, title="Target Take Profit (%)", step=0.01) / 100
take_profit_level = strategy.position_avg_price * (1 + take_profit_pct)
plot(take_profit_level, color=color.green, style=plot.style_line, linewidth=2, title="Take Profit")
plot(strategy.position_avg_price, color=color.black, style=plot.style_line, linewidth=2, title="Entry Price")

// Trailing Profit Setup
enableTrailing = input.bool(false, title="Enable trailing profit")
trailingPerc = input.float(1.0, title="Trailing Distance (%)", minval=0.01, step=0.01) / 100
trailStepTicks = take_profit_level * trailingPerc / syminfo.mintick

// Exit on profit (with trailing or limit order)
if strategy.position_size > 0
    strategy.exit("Exit Buy", limit = enableTrailing ? na : take_profit_level, comment=exitBuyWebhook, trail_price = enableTrailing ? take_profit_level : na, trail_offset = enableTrailing ? trailStepTicks : na)

// Логика входа (с 5 уровнями входа)
if close < L1 and strategy.opentrades == 0
    strategy.order("Buy1", strategy.long, qty = useStocks ? unitsLevel1 : unitsLevel1 / close, comment=buyWebhook)
    s2 := L2
if close < s2 and strategy.opentrades == 1
    strategy.order("Buy2", strategy.long, qty = useStocks ? unitsLevel2 : unitsLevel2 / close, comment=buyWebhook)
    s3 := L3
if close < s3 and strategy.opentrades == 2
    strategy.order("Buy3", strategy.long, qty = useStocks ? unitsLevel3 : unitsLevel3 / close, comment=buyWebhook)
    s4 := L4
if close < s4 and strategy.opentrades == 3
    strategy.order("Buy4", strategy.long, qty = useStocks ? unitsLevel4 : unitsLevel4 / close, comment=buyWebhook)
    s5 := L5
if close < s5 and strategy.opentrades == 4
    strategy.order("Buy5", strategy.long, qty = useStocks ? unitsLevel5 : unitsLevel5 / close, comment=buyWebhook)

// Визуализация: график MA и динамических уровней
l_ma = plot(ma, color=color.red, linewidth=3, title="Moving Average")
l_b1 = plot(plotDynamic ? L1 : na, color=color.red, linewidth=1, title="Level 1")
l_b2 = plot(plotDynamic ? L2 : na, color=color.black, linewidth=1, title="Level 2")
l_b3 = plot(plotDynamic ? L3 : na, color=color.black, linewidth=1, title="Level 3")
l_b4 = plot(plotDynamic ? L4 : na, color=color.black, linewidth=1, title="Level 4")
l_b5 = plot(plotDynamic ? L5 : na, color=color.black, linewidth=1, title="Level 5")

fill(l_ma, l_b1, color=color.new(color.gray, 50))
fill(l_b1, l_b2, color=color.new(color.orange, 90))
fill(l_b2, l_b3, color=color.new(color.orange, 70))
fill(l_b3, l_b4, color=color.new(color.orange, 50))
fill(l_b4, l_b5, color=color.new(color.orange, 30))

// Отображение статических уровней (если открыты сделки)
st2 = plot(strategy.opentrades > 0 ? s2 : na, title="Static Level 2", style=plot.style_linebr)
st3 = plot(strategy.opentrades > 0 ? s3 : na, title="Static Level 3", style=plot.style_linebr)
st4 = plot(strategy.opentrades > 1 ? s4 : na, title="Static Level 4", style=plot.style_linebr)
st5 = plot(strategy.opentrades > 2 ? s5 : na, title="Static Level 5", style=plot.style_linebr)
fill(st2, st3, color=color.new(color.blue, 90))
fill(st3, st4, color=color.new(color.blue, 80))
fill(st4, st5, color=color.new(color.blue, 70))
